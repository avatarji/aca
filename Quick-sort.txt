// Quick sort 
// TC: O(n log n) and SC: O(1) 
 
#include <bits/stdc++.h> 
using namespace std; 
int partition(vector<int> &arr, int low, int high) { 
    int pivot = arr[low]; // Choosing the first element as pivot 
    int i = low; 
    int j = high; 
    while (i < j){ 
        // Increment i until we find an element greater than the pivot 
        while (arr[i] <= pivot && i <= high â€“ 1  i++; 
 
        // Decrement j until we find an element smaller than the pivot 
        while (arr[j] > pivot && j >= low + 1)  j--; 
 
        // If i is less than j, swap the elements at i and j 
        if (i < j) swap(arr[i], arr[j]); 
    } 
    // Swap pivot element with element at j 
    swap(arr[low], arr[j]); 
    return j; // Return the partition index 
} 
 
// Function to implement Quick Sort using recursion 
void qs(vector<int> &arr, int low, int high){ 
    if (low < high) 
    { 
        int pIndex = partition(arr, low, high); // Get partition index 
        qs(arr, low, pIndex - 1); 
        qs(arr, pIndex + 1, high); 
    } 
} 
vector<int> quickSort(vector<int> arr){ 
    qs(arr, 0, arr.size() - 1); 
    return arr; 
} 
 
int main(){ 
    vector<int> arr = {4, 6, 2, 5, 7, 9, 1, 3}; 
    int n = arr.size(); 
    arr = quickSort(arr); 
    cout << "After Using Quick Sort: "; 
    for (int i = 0; i < n; i++) 
    { 
        cout << arr[i] << " "; 
    } 
    return 0; 
} 