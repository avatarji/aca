// Inorder Traversal 
// TC: O(n) and SC: O(h+n) 
 
#include <bits/stdc++.h> 
using namespace std; 
struct TreeNode { 
    int val; 
    TreeNode *left; 
    TreeNode *right; 
    TreeNode() : val(0), left(nullptr), right(nullptr) {} 
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} 
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), 
right(right) {} 
}; 
 
class Solution { 
public: 
    void inorder(TreeNode *root, vector<int> &res) 
    { 
        if (root == nullptr) return; 
        inorder(root->left, res);  // Traverse the left subtree 
        res.push_back(root->val);  // Add the root value to the result 
        inorder(root->right, res); // Traverse the right subtree 
    } 
    vector<int> inorderTraversal(TreeNode *root) 
    { 
        vector<int> res; 
        inorder(root, res); // Start the recursive traversal 
        return res; 
    } 
}; 
 
int main() 
{ 
    // Create a sample binary tree: 
    TreeNode *root = new TreeNode(1); 
    root->right = new TreeNode(2); 
    root->right->left = new TreeNode(3); 
 
    Solution sol; 
    vector<int> result = sol.inorderTraversal(root); 
    // Print the inorder traversal 
    cout << "Inorder Traversal: "; 
    for (int val : result) 
    { 
        cout << val << " "; 
    } 
    return 0; 
} 