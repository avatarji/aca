// Merge two sorted linked lists 
// TC: O(n+m) and SC: O(n+m) 
 
#include <bits/stdc++.h> 
using namespace std; 
 
struct ListNode{ 
    int val; 
    ListNode *next; 
    ListNode() : val(0), next(nullptr) {} 
    ListNode(int x) : val(x), next(nullptr) {} 
    ListNode(int x, ListNode *next) : val(x), next(next) {} 
}; 
 
class Solution{ 
public: 
   ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) { 
        if(list1 == NULL) return list2; 
        if(list2 == NULL) return list1; 
 
        if(list1->val >= list2->val) swap(list1, list2); 
        ListNode *res = list1; 
        while(list1 != NULL && list2 != NULL){ 
            ListNode *temp = NULL; 
            while(list1 != NULL && list1->val <= list2->val){ 
                temp = list1; 
                list1 = list1->next; 
            } 
            temp->next = list2; 
            swap(list1, list2); 
        } 
        return res; 
    } 
}; 
 
void printList(ListNode *head){ 
    while (head != nullptr){ 
        cout << head->val << " "; 
        head = head->next; 
    } 
    cout << endl; 
} 
 
int main() 
{ 
    // Create two linked lists manually: list1 = 1 -> 3 -> 5, list2 = 2 -> 4 -> 6 
    ListNode *list1 = new ListNode(1); 
    list1->next = new ListNode(3); 
    list1->next->next = new ListNode(5); 
   ListNode *list2 = new ListNode(2); 
    list2->next = new ListNode(4); 
    list2->next->next = new ListNode(6); 
 
    Solution solution; 
    ListNode *mergedList = solution.mergeTwoLists(list1, list2); 
 
    cout << "Merged list: "; 
    printList(mergedList); 
 
    return 0; 
} 