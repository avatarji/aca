// Implement a priority queue (Max-Heap)
// TC: insert(): O(log n)
//     deleteMax(): O(log n)
//     printHeap(): O(n)
// SC:O(n)

#include <bits/stdc++.h>
using namespace std;

class MaxHeap
{
private:
    vector<int> heap;

    // Helper function to maintain the heap property (upward)
    void heapifyUp(int index)
    {
        while (index > 0 && heap[(index - 1) / 2] < heap[index])
        {
            swap(heap[index], heap[(index - 1) / 2]);
            index = (index - 1) / 2;
        }
    }

    // Helper function to maintain the heap property (downward)
    void heapifyDown(int index)
    {
        int left = 2 * index + 1, right = 2 * index + 2, largest = index;
        if (left < heap.size() && heap[left] > heap[largest])
            largest = left;
        if (right < heap.size() && heap[right] > heap[largest])
            largest = right;
        if (largest != index)
        {
            swap(heap[index], heap[largest]);
            heapifyDown(largest);
        }
    }

public:
    // Insert an element
    void insert(int val)
    {
        heap.push_back(val);
        heapifyUp(heap.size() - 1);
    }

    // Remove and return the max element
    void deleteMax()
    {
        if (heap.empty())
            return;
        swap(heap[0], heap.back());
        heap.pop_back();
        heapifyDown(0);
    }

    // Print the heap
    void printHeap()
    {
        for (int val : heap)
            cout << val << " ";
        cout << endl;
    }
};

int main()
{
    MaxHeap pq;
    pq.insert(4);
    pq.insert(7);
    pq.insert(10);
    cout << " Heap elements: ";
    pq.printHeap(); // Print heap after insertions

    pq.insert(20);
    cout << " Heap elements: ";
    pq.printHeap(); // Print heap after insertions

    pq.deleteMax(); // Remove the max element
    cout << " Heap elements: ";
    pq.printHeap(); // Print heap after deletion

    return 0;
}
